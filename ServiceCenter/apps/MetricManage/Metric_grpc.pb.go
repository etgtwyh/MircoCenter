// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: Metric.proto

package MetricManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsService_ReportMetrics_FullMethodName = "/MetricsService/ReportMetrics"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	// 客户端流模式的RPC方法
	ReportMetrics(ctx context.Context, opts ...grpc.CallOption) (MetricsService_ReportMetricsClient, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) ReportMetrics(ctx context.Context, opts ...grpc.CallOption) (MetricsService_ReportMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[0], MetricsService_ReportMetrics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceReportMetricsClient{stream}
	return x, nil
}

type MetricsService_ReportMetricsClient interface {
	Send(*MetricsData) error
	CloseAndRecv() (*ReportResponse, error)
	grpc.ClientStream
}

type metricsServiceReportMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsServiceReportMetricsClient) Send(m *MetricsData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsServiceReportMetricsClient) CloseAndRecv() (*ReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	// 客户端流模式的RPC方法
	ReportMetrics(MetricsService_ReportMetricsServer) error
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) ReportMetrics(MetricsService_ReportMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_ReportMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServiceServer).ReportMetrics(&metricsServiceReportMetricsServer{stream})
}

type MetricsService_ReportMetricsServer interface {
	SendAndClose(*ReportResponse) error
	Recv() (*MetricsData, error)
	grpc.ServerStream
}

type metricsServiceReportMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsServiceReportMetricsServer) SendAndClose(m *ReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsServiceReportMetricsServer) Recv() (*MetricsData, error) {
	m := new(MetricsData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportMetrics",
			Handler:       _MetricsService_ReportMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "Metric.proto",
}
