// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: ServiceManage.proto

package ServiceManage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceManage_RecoverService_FullMethodName = "/ServiceManage/RecoverService"
)

// ServiceManageClient is the client API for ServiceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManageClient interface {
	// 服务发现  获取最佳节点地址
	RecoverService(ctx context.Context, in *ServicePrefix, opts ...grpc.CallOption) (*ServiceHost, error)
}

type serviceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManageClient(cc grpc.ClientConnInterface) ServiceManageClient {
	return &serviceManageClient{cc}
}

func (c *serviceManageClient) RecoverService(ctx context.Context, in *ServicePrefix, opts ...grpc.CallOption) (*ServiceHost, error) {
	out := new(ServiceHost)
	err := c.cc.Invoke(ctx, ServiceManage_RecoverService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManageServer is the server API for ServiceManage service.
// All implementations must embed UnimplementedServiceManageServer
// for forward compatibility
type ServiceManageServer interface {
	// 服务发现  获取最佳节点地址
	RecoverService(context.Context, *ServicePrefix) (*ServiceHost, error)
	mustEmbedUnimplementedServiceManageServer()
}

// UnimplementedServiceManageServer must be embedded to have forward compatible implementations.
type UnimplementedServiceManageServer struct {
}

func (UnimplementedServiceManageServer) RecoverService(context.Context, *ServicePrefix) (*ServiceHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverService not implemented")
}
func (UnimplementedServiceManageServer) mustEmbedUnimplementedServiceManageServer() {}

// UnsafeServiceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManageServer will
// result in compilation errors.
type UnsafeServiceManageServer interface {
	mustEmbedUnimplementedServiceManageServer()
}

func RegisterServiceManageServer(s grpc.ServiceRegistrar, srv ServiceManageServer) {
	s.RegisterService(&ServiceManage_ServiceDesc, srv)
}

func _ServiceManage_RecoverService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManageServer).RecoverService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceManage_RecoverService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManageServer).RecoverService(ctx, req.(*ServicePrefix))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceManage_ServiceDesc is the grpc.ServiceDesc for ServiceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceManage",
	HandlerType: (*ServiceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecoverService",
			Handler:    _ServiceManage_RecoverService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServiceManage.proto",
}
